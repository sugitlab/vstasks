// Generated by Copilot
import * as vscode from "vscode";
import { WorkspaceTaskManager } from "./models/task-manager";
import { TaskTreeDataProvider } from "./views/task-tree-provider";
import { TaskCommands } from "./task-commands";
import { QuickActions } from "./quick-actions";
import { WorkspaceCommands } from "./workspace-commands";
import { TaskCodeLensProvider } from "./task-code-lens-provider";
import { TaskHoverProvider } from "./task-hover-provider";
import { TaskCompletionProvider } from "./task-completion-provider";
import { TaskDecorationProvider } from "./task-decoration-provider";
import { StatisticsWebView } from "./views/statistics-webview";

// This function is called when your extension is activated
export function activate(context: vscode.ExtensionContext) {
  console.log("VsTasks extension is now active!");

  // Create workspace task manager instance
  const taskManager = new WorkspaceTaskManager();

  // Create tree view provider
  const taskTreeProvider = new TaskTreeDataProvider(taskManager);
  const taskTreeView = vscode.window.createTreeView("vstasks.taskTree", {
    treeDataProvider: taskTreeProvider,
  });

  // Register command: Refresh Tasks
  const refreshTasksCommand = vscode.commands.registerCommand(
    "vstasks.refreshTasks",
    async () => {
      vscode.window.showInformationMessage("Refreshing tasks...");
      await taskManager.scanWorkspace();
      vscode.window.showInformationMessage("Tasks refreshed successfully!");
    }
  );

  // Register command: Search Tasks
  const searchTasksCommand = vscode.commands.registerCommand(
    "vstasks.searchTasks",
    () => {
      vscode.window.showInformationMessage("Searching tasks...");
      // Implementation will come later
    }
  );

  // Register command: Create Task
  const createTaskCommand = vscode.commands.registerCommand(
    "vstasks.createTask",
    () => {
      vscode.window.showInformationMessage("Creating new task...");
      // Implementation will come later
    }
  );

  // Register command: Toggle Task Status
  const toggleTaskStatusCommand = vscode.commands.registerCommand(
    "vstasks.toggleTaskStatus",
    (taskId?: string) => {
      if (!taskId) {
        vscode.window.showErrorMessage("No task selected");
        return;
      }

      if (taskManager.toggleTaskStatus(taskId)) {
        vscode.window.showInformationMessage("Task status toggled");
      } else {
        vscode.window.showErrorMessage("Failed to toggle task status");
      }
    }
  );

  // Register command: Run Task Query
  const runQueryCommand = vscode.commands.registerCommand(
    "vstasks.runQuery",
    () => {
      vscode.window.showInformationMessage("Running task query...");
      // Implementation will come later
    }
  );

  // Generated by Copilot
  // Register command: Show Task Statistics
  const showStatisticsCommand = vscode.commands.registerCommand(
    "vstasks.showStatistics",
    async () => {
      try {
        const statisticsWebView = new StatisticsWebView(context, taskManager);
        await statisticsWebView.show();
      } catch (err) {
        vscode.window.showErrorMessage(
          "Failed to show statistics: " +
            (err instanceof Error ? err.message : String(err))
        );
      }
    }
  );

  // Setup workspace file watcher for markdown files
  const mdWatcher = vscode.workspace.createFileSystemWatcher("**/*.md");
  const markdownWatcher =
    vscode.workspace.createFileSystemWatcher("**/*.markdown");

  // File watcher events
  mdWatcher.onDidChange((uri: vscode.Uri) => {
    console.log(`File changed: ${uri.fsPath}`);
    taskManager.scanFile(uri);
  });

  mdWatcher.onDidCreate((uri: vscode.Uri) => {
    console.log(`New file created: ${uri.fsPath}`);
    taskManager.scanFile(uri);
  });

  mdWatcher.onDidDelete((uri: vscode.Uri) => {
    console.log(`File deleted: ${uri.fsPath}`);
    taskManager.removeTasks(uri.fsPath);
  });

  // Register watchers for .markdown files too
  markdownWatcher.onDidChange((uri: vscode.Uri) => {
    console.log(`File changed: ${uri.fsPath}`);
    taskManager.scanFile(uri);
  });

  markdownWatcher.onDidCreate((uri: vscode.Uri) => {
    console.log(`New file created: ${uri.fsPath}`);
    taskManager.scanFile(uri);
  });

  markdownWatcher.onDidDelete((uri: vscode.Uri) => {
    console.log(`File deleted: ${uri.fsPath}`);
    taskManager.removeTasks(uri.fsPath);
  });

  // Register editor features for markdown
  context.subscriptions.push(
    vscode.languages.registerCodeLensProvider(
      { language: "markdown" },
      new TaskCodeLensProvider()
    ),
    vscode.languages.registerHoverProvider(
      { language: "markdown" },
      new TaskHoverProvider()
    ),
    vscode.languages.registerCompletionItemProvider(
      { language: "markdown" },
      new TaskCompletionProvider(),
      "#",
      "-",
      "[",
      "⏫",
      "⏳",
      "📅"
    )
  );
  // Optionally: update decorations on active editor change
  const decoProvider = new TaskDecorationProvider();
  vscode.window.onDidChangeActiveTextEditor((editor) => {
    if (editor && editor.document.languageId === "markdown") {
      decoProvider.updateDecorations(editor);
    }
  });
  vscode.workspace.onDidChangeTextDocument((e) => {
    const editor = vscode.window.activeTextEditor;
    if (
      editor &&
      editor.document === e.document &&
      editor.document.languageId === "markdown"
    ) {
      decoProvider.updateDecorations(editor);
    }
  });

  // Scan workspace for tasks on activation
  taskManager.scanWorkspace().then(() => {
    console.log("Initial workspace scan complete");
  });

  // Register new command classes
  const taskCommands = new TaskCommands(taskManager);
  taskCommands.registerCommands(context);
  const quickActions = new QuickActions(taskManager);
  quickActions.registerCommands(context);
  const workspaceCommands = new WorkspaceCommands(taskManager);
  workspaceCommands.registerCommands(context);

  // Register everything to be disposed when extension is deactivated
  context.subscriptions.push(
    refreshTasksCommand,
    searchTasksCommand,
    createTaskCommand,
    toggleTaskStatusCommand,
    runQueryCommand,
    showStatisticsCommand,
    mdWatcher,
    markdownWatcher,
    taskTreeView
  );
}

// This function is called when your extension is deactivated
export function deactivate() {
  console.log("VsTasks extension is now deactivated!");
}
