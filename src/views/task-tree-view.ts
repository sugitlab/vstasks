// Generated by Copilot
import * as vscode from "vscode";
import { TaskTreeDataProvider } from "./task-tree-provider";
import { WorkspaceTaskManager } from "../models/task-manager";
import { TaskTreeItem } from "./task-tree-item";

export class TaskTreeView {
  private treeView: vscode.TreeView<TaskTreeItem>;
  private dataProvider: TaskTreeDataProvider;

  constructor(taskManager: WorkspaceTaskManager) {
    this.dataProvider = new TaskTreeDataProvider(taskManager);
    this.treeView = vscode.window.createTreeView("vstasks.taskTree", {
      treeDataProvider: this.dataProvider,
      showCollapseAll: true,
      canSelectMany: false,
    });
  }

  show(): void {
    // VSCode TreeViewは自動で表示されるため、明示的なshowは不要
    // undefinedを渡すと型エラーになるため、空配列で展開のみ実行
    // ここでは何もrevealしない
    // this.treeView.reveal(undefined, { expand: true });
  }

  hide(): void {
    this.treeView.dispose();
  }

  refresh(): void {
    this.dataProvider.refresh();
  }

  revealTask(taskId: string): void {
    // タスクIDで該当TaskTreeItemを探してreveal
    // ここでは簡易実装（全タスクを走査）
    const allTasks = this.dataProvider["taskManager"].getAllTasks();
    const task = allTasks.find((t) => t.id === taskId);
    if (task) {
      const item = new TaskTreeItem(task, "task");
      this.treeView.reveal(item, { select: true, focus: true });
    }
  }

  setGroupBy(groupBy: "file" | "status" | "tag") {
    this.dataProvider.setGroupBy(groupBy);
  }
}
