// Generated by Copilot
import * as vscode from "vscode";
import { ITask, TaskStatus, Priority } from "./models/task";
import { TaskDocumentHelper } from "./task-document-helper";

export class TaskDecorationProvider {
  /**
   * Update decorations for all tasks in the editor.
   */
  public updateDecorations(editor: vscode.TextEditor): void {
    const tasks = TaskDocumentHelper.getTasksInDocument(editor.document);
    const done: vscode.DecorationOptions[] = [];
    const todo: vscode.DecorationOptions[] = [];
    const high: vscode.DecorationOptions[] = [];
    for (const task of tasks) {
      const deco = this.createTaskDecoration(task);
      if (task.status === TaskStatus.DONE) {
        done.push(deco);
      } else if (
        task.priority === Priority.HIGH ||
        task.priority === Priority.HIGHEST
      ) {
        high.push(deco);
      } else {
        todo.push(deco);
      }
    }
    editor.setDecorations(TaskDecorationProvider.doneDecorationType, done);
    editor.setDecorations(TaskDecorationProvider.highDecorationType, high);
    editor.setDecorations(TaskDecorationProvider.todoDecorationType, todo);
  }

  /**
   * Create a decoration for a single task.
   */
  public createTaskDecoration(task: ITask): vscode.DecorationOptions {
    const range = new vscode.Range(
      task.lineNumber,
      0,
      task.lineNumber,
      task.rawText.length
    );
    let renderOptions: vscode.DecorationRenderOptions = {};
    if (task.status === TaskStatus.DONE) {
      renderOptions = { textDecoration: "line-through", color: "#888" };
    } else if (
      task.priority === Priority.HIGH ||
      task.priority === Priority.HIGHEST
    ) {
      renderOptions = { color: "#d73a49", fontWeight: "bold" };
    } else {
      renderOptions = { color: "inherit" };
    }
    return { range, renderOptions };
  }

  // Decoration types
  private static doneDecorationType =
    vscode.window.createTextEditorDecorationType({
      textDecoration: "line-through",
      color: "#888",
    });
  private static highDecorationType =
    vscode.window.createTextEditorDecorationType({
      color: "#d73a49",
      fontWeight: "bold",
    });
  private static todoDecorationType =
    vscode.window.createTextEditorDecorationType({
      color: "inherit",
    });
}
