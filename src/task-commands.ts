// Generated by Copilot
import * as vscode from "vscode";
import { WorkspaceTaskManager } from "./models/task-manager";
import { ITask } from "./models/task";
import { TaskEditor } from "./views/task-editor";
import { TaskDocumentHelper } from "./task-document-helper";
import { TaskParser } from "./models/task-parser";

export class TaskCommands {
  private taskManager: WorkspaceTaskManager;

  constructor(taskManager: WorkspaceTaskManager) {
    this.taskManager = taskManager;
  }

  public registerCommands(context: vscode.ExtensionContext): void {
    context.subscriptions.push(
      vscode.commands.registerCommand(
        "vstasks.createTask",
        this.createTask.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.toggleTaskStatus",
        this.toggleTaskStatus.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.editTask",
        this.editTask.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.deleteTask",
        this.deleteTask.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.showAllTasks",
        this.showAllTasks.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.showTasksByTag",
        this.showTasksByTag.bind(this)
      ),
      vscode.commands.registerCommand(
        "vstasks.runCustomQuery",
        this.runCustomQuery.bind(this)
      )
    );
  }

  public async createTask(): Promise<void> {
    try {
      vscode.window.showInformationMessage("Creating new task...");
      // TODO: Implement task creation dialog
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to create task: ${err}`);
    }
  }

  public async toggleTaskStatus(task?: ITask): Promise<void> {
    try {
      if (!task) {
        vscode.window.showErrorMessage("No task selected");
        return;
      }
      const result = this.taskManager.toggleTaskStatus(task.id);
      if (result) {
        vscode.window.showInformationMessage("Task status toggled");
      } else {
        vscode.window.showErrorMessage("Failed to toggle task status");
      }
    } catch (err) {
      vscode.window.showErrorMessage(`Error toggling task status: ${err}`);
    }
  }

  public async editTask(task?: ITask): Promise<void> {
    try {
      if (!task) {
        vscode.window.showErrorMessage("No task selected");
        return;
      }
      const editor = vscode.window.activeTextEditor;
      if (!editor || editor.document.languageId !== "markdown") {
        vscode.window.showErrorMessage("No active markdown editor");
        return;
      }
      const updated = await TaskEditor.showEditDialog(task);
      if (!updated) {
        vscode.window.showInformationMessage("編集がキャンセルされました");
        return;
      }
      // rawText再生成
      updated.rawText = TaskParser.generateTaskLine(updated);
      await TaskDocumentHelper.updateTaskInDocument(
        editor.document,
        task,
        updated
      );
      vscode.window.showInformationMessage("タスクを編集しました");
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to edit task: ${err}`);
    }
  }

  public async deleteTask(task?: ITask): Promise<void> {
    try {
      if (!task) {
        vscode.window.showErrorMessage("No task selected");
        return;
      }
      // TODO: Implement task deletion
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to delete task: ${err}`);
    }
  }

  public async showAllTasks(): Promise<void> {
    try {
      // TODO: Implement show all tasks in a panel
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to show all tasks: ${err}`);
    }
  }

  public async showTasksByTag(): Promise<void> {
    try {
      // TODO: Implement show tasks by tag
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to show tasks by tag: ${err}`);
    }
  }

  public async runCustomQuery(): Promise<void> {
    try {
      // TODO: Implement custom query dialog
    } catch (err) {
      vscode.window.showErrorMessage(`Failed to run custom query: ${err}`);
    }
  }
}
